plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.google.guava:guava:30.1-jre'
    implementation 'org.aspectj:aspectjweaver:1.9.19'
    implementation 'org.springframework.boot:spring-boot-starter-websocket' // 웹소켓 사용
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    compileOnly("org.springframework.boot:spring-boot-devtools")
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.4.6'

}

tasks.named('test') {
    useJUnitPlatform()
}


def frontendDir = "$projectDir/src/main/happyus_front"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

import java.security.MessageDigest

task calculatePackageJsonHash {
    doLast {
        def packageJsonFile = new File(frontendDir, 'package.json')
        def packageJsonHashFile = new File(frontendDir, 'package-json-hash.txt')

        if (packageJsonFile.exists()) {
            // package.json 파일의 해시값을 계산
            MessageDigest digest = MessageDigest.getInstance("SHA-256")
            def packageJsonHash = digest.digest(packageJsonFile.bytes).encodeHex().toString()

            // 이전 해시값을 읽기
            def previousHash = packageJsonHashFile.exists() ? packageJsonHashFile.text : ''

            if (!packageJsonHash.equals(previousHash)) {
                // 해시값이 변경되었다면, 새 해시값을 파일에 저장
                packageJsonHashFile.text = packageJsonHash

                // installReact 태스크의 onlyIf 조건을 만족시키기 위한 플래그 설정
                project.ext.shouldRunInstallReact = true
            } else {
                // 해시값이 변경되지 않았다면, 태스크 실행을 건너뛰기 위한 플래그 설정
                project.ext.shouldRunInstallReact = false
            }
        }
    }
}

task installReact(type: Exec, dependsOn: calculatePackageJsonHash) {
    onlyIf { project.ext.shouldRunInstallReact }

    doFirst {
        logger.lifecycle("Running 'npm install' due to changes in package.json")
    }

    workingDir frontendDir
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}


task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

//  React 앱의 빌드 결과물을 Spring Boot 프로젝트의 resources/static 디렉토리로 복사
//  React 앱의 빌드 결과물이 Spring Boot 프로젝트 내부에 적절히 배치하기 위함
task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"

    doFirst {
        delete "$projectDir/src/main/resources/static/*" // 이전 빌드 결과물은 삭제한다.
    }

    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}
